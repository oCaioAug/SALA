generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  notifications Notification[]
  reservations  Reservation[]
  sessions      Session[]

  @@map("users")
}

model Room {
  id           String        @id @default(cuid())
  name         String
  description  String?
  status       RoomStatus    @default(LIVRE)
  capacity     Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  items        Item[]
  reservations Reservation[]

  @@map("rooms")
}

model Item {
  id             String   @id @default(cuid())
  name           String
  description    String?
  specifications String[]
  quantity       Int      @default(1)
  icon           String?
  roomId         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  room           Room?    @relation(fields: [roomId], references: [id])

  @@map("items")
}

model Reservation {
  id        String            @id @default(cuid())
  userId    String
  roomId    String
  startTime DateTime
  endTime   DateTime
  purpose   String?
  status    ReservationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  room      Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// model notifications {
//   id        String           @id
//   userId    String
//   type      NotificationType
//   title     String
//   message   String
//   data      Json?
//   isRead    Boolean          @default(false)
//   createdAt DateTime         @default(now())
//   updatedAt DateTime
//   users     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

enum Role {
  ADMIN
  USER
}

enum RoomStatus {
  LIVRE
  EM_USO
  RESERVADO
}

enum ReservationStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  RESERVATION_CREATED
  RESERVATION_APPROVED
  RESERVATION_REJECTED
  RESERVATION_CANCELLED
  RESERVATION_CONFLICT
  ROOM_STATUS_CHANGED
  SYSTEM_ANNOUNCEMENT
}
